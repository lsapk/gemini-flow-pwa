
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.2?target=deno";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

async function getUserData(user_id: string, supabase: any) {
  // R√©cup√©rer toutes les donn√©es utilisateur en temps r√©el
  const [
    { data: tasks },
    { data: habits },
    { data: goals },
    { data: journalEntries },
    { data: focusSessions },
    { data: backgroundSessions },
    { data: userProfile }
  ] = await Promise.all([
    supabase.from('tasks').select('*').eq('user_id', user_id).order('created_at', { ascending: false }),
    supabase.from('habits').select('*').eq('user_id', user_id).eq('is_archived', false).order('sort_order'),
    supabase.from('goals').select('*').eq('user_id', user_id).eq('is_archived', false).order('created_at', { ascending: false }),
    supabase.from('journal_entries').select('*').eq('user_id', user_id).order('created_at', { ascending: false }).limit(10),
    supabase.from('focus_sessions').select('*').eq('user_id', user_id).order('created_at', { ascending: false }).limit(20),
    supabase.from('background_focus_sessions').select('*').eq('user_id', user_id).order('created_at', { ascending: false }).limit(10),
    supabase.from('user_profiles').select('*').eq('id', user_id).single()
  ]);

  return {
    tasks: tasks || [],
    habits: habits || [],
    goals: goals || [],
    journal_entries: journalEntries || [],
    focus_sessions: focusSessions || [],
    background_focus_sessions: backgroundSessions || [],
    user_profile: userProfile
  };
}

async function createPendingAction(action: any, user_id: string, supabase: any) {
  const { data, error } = await supabase
    .from('ai_pending_actions')
    .insert({
      user_id: user_id,
      action_type: action.type,
      action_data: action.data
    })
    .select()
    .single();
  
  if (error) throw error;
  return data;
}

async function executeAction(action: any, user_id: string, supabase: any) {
  console.log("Executing action:", action);
  let actionResult = null;
  
  switch (action.type) {
    case 'create_task':
      if (!action.data.title || action.data.title.trim() === '') {
        throw new Error('Le titre de la t√¢che est requis');
      }
      
      const { data: taskData, error: taskError } = await supabase
        .from('tasks')
        .insert({
          user_id: user_id,
          title: action.data.title.trim(),
          description: action.data.description || null,
          priority: ['high', 'medium', 'low'].includes(action.data.priority) ? action.data.priority : 'medium',
          due_date: action.data.due_date || null,
          completed: false,
          parent_task_id: action.data.parent_task_id || null,
          sort_order: action.data.sort_order || 0
        })
        .select()
        .single();
      
      if (taskError) throw taskError;
      actionResult = { type: 'task_created', data: taskData };
      break;
      
    case 'create_habit':
      if (!action.data.title || action.data.title.trim() === '') {
        throw new Error('Le titre de l\'habitude est requis');
      }
      
      const { data: habitData, error: habitError } = await supabase
        .from('habits')
        .insert({
          user_id: user_id,
          title: action.data.title.trim(),
          description: action.data.description || null,
          frequency: ['daily', 'weekly', 'monthly'].includes(action.data.frequency) ? action.data.frequency : 'daily',
          category: ['health', 'productivity', 'personal'].includes(action.data.category) ? action.data.category : null,
          target: Math.max(1, parseInt(action.data.target) || 1),
          streak: 0,
          sort_order: action.data.sort_order || 0
        })
        .select()
        .single();
      
      if (habitError) throw habitError;
      actionResult = { type: 'habit_created', data: habitData };
      break;
      
    case 'create_goal':
      if (!action.data.title || action.data.title.trim() === '') {
        throw new Error('Le titre de l\'objectif est requis');
      }
      
      const { data: goalData, error: goalError } = await supabase
        .from('goals')
        .insert({
          user_id: user_id,
          title: action.data.title.trim(),
          description: action.data.description || null,
          category: ['personal', 'professional', 'health', 'finance'].includes(action.data.category) ? action.data.category : 'personal',
          target_date: action.data.target_date || null,
          progress: 0,
          completed: false
        })
        .select()
        .single();
      
      if (goalError) throw goalError;
      actionResult = { type: 'goal_created', data: goalData };
      break;
      
    case 'create_journal':
      if (!action.data.title || action.data.title.trim() === '') {
        throw new Error('Le titre de l\'entr√©e de journal est requis');
      }
      if (!action.data.content || action.data.content.trim() === '') {
        throw new Error('Le contenu de l\'entr√©e de journal est requis');
      }
      
      const { data: journalData, error: journalError } = await supabase
        .from('journal_entries')
        .insert({
          user_id: user_id,
          title: action.data.title.trim(),
          content: action.data.content.trim(),
          mood: ['excellent', 'good', 'neutral', 'bad', 'terrible'].includes(action.data.mood) ? action.data.mood : null,
          tags: Array.isArray(action.data.tags) ? action.data.tags : null
        })
        .select()
        .single();
      
      if (journalError) throw journalError;
      actionResult = { type: 'journal_created', data: journalData };
      break;

    case 'create_tasks':
      if (!Array.isArray(action.data) || action.data.length === 0) {
        throw new Error('Aucune t√¢che √† cr√©er');
      }
      
      const createdTasks = [];
      for (const taskData of action.data) {
        if (!taskData.title || taskData.title.trim() === '') {
          continue; // Skip tasks without title
        }
        
        const { data: newTask, error: taskErr } = await supabase
          .from('tasks')
          .insert({
            user_id: user_id,
            title: taskData.title.trim(),
            description: taskData.description || null,
            priority: ['high', 'medium', 'low'].includes(taskData.priority) ? taskData.priority : 'medium',
            due_date: taskData.due_date || null,
            completed: false,
            sort_order: taskData.sort_order || 0
          })
          .select()
          .single();
        
        if (!taskErr && newTask) {
          createdTasks.push(newTask);
        }
      }
      
      actionResult = { type: 'tasks_created', data: createdTasks, count: createdTasks.length };
      break;
  }
  
  if (!actionResult) {
    throw new Error(`Action non reconnue: ${action.type}`);
  }

  return actionResult;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, user_id, action, confirm_action } = await req.json();
    
    console.log("Received request:", { message, user_id, action, confirm_action });
    
    if (!message && !action && !confirm_action) {
      throw new Error('Message, action or confirm_action is required');
    }
    
    if (!user_id) {
      throw new Error('User ID is required');
    }
    
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    
    if (!geminiApiKey) {
      console.error('GEMINI_API_KEY not found');
      return new Response(JSON.stringify({ 
        response: "Configuration manquante. L'API Gemini n'est pas configur√©e.",
        error: true 
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const supabase = createClient(supabaseUrl!, supabaseServiceKey!);

    // Si c'est une confirmation d'action
    if (confirm_action) {
      try {
        const { data: pendingAction, error: fetchError } = await supabase
          .from('ai_pending_actions')
          .select('*')
          .eq('id', confirm_action)
          .eq('user_id', user_id)
          .single();

        if (fetchError || !pendingAction) {
          throw new Error('Action non trouv√©e ou expir√©e');
        }

        const actionResult = await executeAction({
          type: pendingAction.action_type,
          data: pendingAction.action_data
        }, user_id, supabase);

        // Supprimer l'action en attente
        await supabase
          .from('ai_pending_actions')
          .delete()
          .eq('id', confirm_action);

        return new Response(JSON.stringify({ 
          response: `‚úÖ ${actionResult.type === 'task_created' ? 'T√¢che' : 
                      actionResult.type === 'habit_created' ? 'Habitude' : 
                      actionResult.type === 'goal_created' ? 'Objectif' : 
                      actionResult.type === 'tasks_created' ? `${actionResult.count} t√¢ches` : 'Entr√©e de journal'} cr√©√©(e) avec succ√®s ! üéâ`,
          action_result: actionResult
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      } catch (error) {
        console.error('Error confirming action:', error);
        return new Response(JSON.stringify({ 
          response: `‚ùå Erreur lors de la confirmation : ${error.message}`,
          error: true 
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }
    }

    // Si une action est pass√©e directement, on l'ex√©cute
    if (action && action.type) {
      try {
        const actionResult = await executeAction(action, user_id, supabase);
        console.log("Action executed successfully:", actionResult);
        return new Response(JSON.stringify({ 
          response: `‚úÖ ${actionResult.type === 'task_created' ? 'T√¢che' : 
                      actionResult.type === 'habit_created' ? 'Habitude' : 
                      actionResult.type === 'goal_created' ? 'Objectif' : 
                      actionResult.type === 'tasks_created' ? `${actionResult.count} t√¢ches` : 'Entr√©e de journal'} cr√©√©(e) avec succ√®s ! üéâ`,
          action_result: actionResult
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      } catch (error) {
        console.error('Error executing action:', error);
        return new Response(JSON.stringify({ 
          response: `‚ùå Erreur lors de la cr√©ation : ${error.message}`,
          error: true 
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }
    }

    // R√©cup√©rer toutes les donn√©es utilisateur
    const userData = await getUserData(user_id, supabase);

    const systemPrompt = `Tu es DeepFlow AI, un assistant IA personnel sp√©cialis√© dans le d√©veloppement personnel et la productivit√©. 
Tu parles TOUJOURS en fran√ßais et tu utilises TOUJOURS des emojis appropri√©s dans tes r√©ponses (1 √† 3 par r√©ponse) üòä.
Tu as acc√®s aux donn√©es en temps r√©el de l'utilisateur et tu peux l'aider √† cr√©er des t√¢ches, habitudes, objectifs et entr√©es de journal.

IMPORTANT : 
- Tu ne dois JAMAIS mentionner le mot "JSON", "format JSON" ni d'instruction technique √† l'utilisateur.
- Pour cr√©er plusieurs √©l√©ments ou des √©l√©ments complexes, tu dois TOUJOURS demander confirmation explicite avec le format JSON ci-dessous.
- Ne cr√©e des √©l√©ments directement QUE si l'utilisateur le demande explicitement ET simplement.

Pour cr√©er un √©l√©ment qui n√©cessite une confirmation, ta r√©ponse DOIT contenir un bloc de code. N'ajoute aucun commentaire ou texte explicatif √† l'int√©rieur de ce bloc. Le bloc doit commencer par \`\`\`json et se terminer par \`\`\`. Voici le format √† l'int√©rieur du bloc :
\`\`\`json
{"pending_action":{"type":"create_task","data":{"title":"titre","description":"description","priority":"medium","due_date":"YYYY-MM-DD"}}}
\`\`\`

Pour plusieurs √©l√©ments :
\`\`\`json
{"pending_action":{"type":"create_tasks","data":[{"title":"titre1","description":"desc1","priority":"high","due_date":"YYYY-MM-DD"},{"title":"titre2","description":"desc2","priority":"medium"}]}}
\`\`\`

DONN√âES UTILISATEUR ACTUELLES (EN TEMPS R√âEL):
${JSON.stringify(userData, null, 2)}

CAPACIT√âS:
- Analyser les donn√©es de productivit√© de l'utilisateur en d√©tail üìä
- Cr√©er des t√¢ches, habitudes, objectifs, entr√©es de journal avec confirmation ‚ú®
- Donner des conseils personnalis√©s bas√©s sur les vraies donn√©es temps r√©el üí°
- Fournir des statistiques pr√©cises et des analyses approfondies üìà
- Proposer des am√©liorations concr√®tes et r√©alisables üöÄ

INSTRUCTIONS:
- R√©ponds TOUJOURS en fran√ßais et avec des emojis adapt√©s üòä
- Sois encourageant, constructif et empathique üí™
- Propose des actions concr√®tes et r√©alisables ‚úÖ
- Utilise un ton amical et professionnel ü§ù
- Pour les cr√©ations multiples ou complexes, utilise TOUJOURS le format JSON de confirmation ci-dessus.
- Analyse les donn√©es temps r√©el pour donner des conseils pr√©cis et personnalis√©s.
- Tu as acc√®s aux habitudes archiv√©es, utilise ces informations pour donner des conseils pertinents.
`;

    console.log("Calling Gemini API...");
    
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              { text: `${systemPrompt}\n\nUtilisateur: ${message}` }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 1500,
          topP: 0.8,
          topK: 40
        }
      }),
    });

    if (!response.ok) {
      console.error('Gemini API error:', response.status, response.statusText);
      const errorText = await response.text();
      console.error('Error details:', errorText);
      
      return new Response(JSON.stringify({ 
        response: "Je rencontre actuellement des difficult√©s techniques. Veuillez r√©essayer dans quelques instants. üòÖ",
        error: true,
        details: `API Error: ${response.status}`
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const data = await response.json();
    console.log("Gemini response received:", JSON.stringify(data, null, 2));

    let responseText = data.candidates?.[0]?.content?.parts?.[0]?.text || "D√©sol√©, je n'ai pas pu traiter votre demande. Veuillez r√©essayer. üòÖ";
    console.log("Final AI response:", responseText);

    // V√©rifier si la r√©ponse contient une action en attente
    const pendingActionRegex = /```json\s*(\{[\s\S]*?"pending_action"[\s\S]*?\})\s*```/;
    const match = responseText.match(pendingActionRegex);

    if (match) {
      try {
        const jsonString = match[1];
        const actionJson = JSON.parse(jsonString);

        if (actionJson.pending_action) {
          console.log("Pending action detected, creating:", actionJson.pending_action);
          
          const pendingAction = await createPendingAction(actionJson.pending_action, user_id, supabase);
          const cleanedResponse = responseText.replace(match[0], '').trim();
          
          return new Response(JSON.stringify({ 
            response: cleanedResponse || "J'ai pr√©par√© une action pour vous. Veuillez la confirmer ci-dessous. ü§î",
            pending_action: pendingAction
          }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          });
        }
      } catch (e) {
        console.error("Error processing pending action from AI response:", e.message);
      }
    }

    // V√©rifier si la r√©ponse contient une action directe (pour compatibilit√©)
    const directActionRegex = /```json\s*(\{[\s\S]*?"action"[\s\S]*?\})\s*```/;
    const directMatch = responseText.match(directActionRegex);

    if (directMatch) {
      try {
        const jsonString = directMatch[1];
        const actionJson = JSON.parse(jsonString);

        if (actionJson.action) {
          console.log("Direct action detected, executing:", actionJson.action);
          
          const actionResult = await executeAction(actionJson.action, user_id, supabase);
          const cleanedResponse = responseText.replace(directMatch[0], '').trim();
          
          const successMessage = `‚úÖ ${actionResult.type === 'task_created' ? 'T√¢che' : 
                                  actionResult.type === 'habit_created' ? 'Habitude' : 
                                  actionResult.type === 'goal_created' ? 'Objectif' : 
                                  actionResult.type === 'tasks_created' ? `${actionResult.count} t√¢ches` : 'Entr√©e de journal'} cr√©√©(e) avec succ√®s ! üéâ`;

          return new Response(JSON.stringify({ 
            response: cleanedResponse || successMessage,
            action_result: actionResult
          }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          });
        }
      } catch (e) {
        console.error("Error processing direct action from AI response:", e.message);
      }
    }

    return new Response(JSON.stringify({ response: responseText }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in gemini-chat-enhanced function:', error);
    
    let errorMessage = 'Une erreur inattendue s\'est produite. Veuillez r√©essayer. üòÖ';
    
    if (error.message?.includes('API')) {
      errorMessage = 'Probl√®me de connexion avec le service IA. Veuillez r√©essayer dans quelques instants. üîÑ';
    } else if (error.message?.includes('required')) {
      errorMessage = 'Donn√©es manquantes dans la requ√™te. Veuillez rafra√Æchir la page. üîÑ';
    }
    
    return new Response(JSON.stringify({ 
      response: errorMessage,
      error: true,
      details: error.message 
    }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
